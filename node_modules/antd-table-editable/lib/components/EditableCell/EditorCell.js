var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/EditableCell/EditorCell.tsx
var EditorCell_exports = {};
__export(EditorCell_exports, {
  default: () => EditorCell_default
});
module.exports = __toCommonJS(EditorCell_exports);
var import_react = require("react");
var import_context = require("../../context");
var import_useCellEditable = __toESM(require("../../hooks/useCellEditable"));
var import_utils = require("../../utils");
var EditorCell = (0, import_react.memo)(
  ({ editorComponents, ...props }) => {
    const Component = editorComponents[props.editorType];
    const { mode, selected, setMode, setSelected, fieldProps, render, form, cellProps } = (0, import_useCellEditable.default)(props);
    const contextValue = (0, import_react.useMemo)(
      () => ({
        mode,
        setMode,
        selected,
        setSelected,
        form,
        editable: props.editable,
        editorType: props.editorType
      }),
      [mode, setMode, selected, setSelected, form, props.editable, props.editorType]
    );
    return /* @__PURE__ */ React.createElement(import_context.CellContext.Provider, { value: contextValue }, /* @__PURE__ */ React.createElement(
      Component,
      {
        value: props.value,
        fieldProps,
        render,
        cellProps
      }
    ));
  },
  (prev, next) => (0, import_utils.memoEqual)(prev, next, {
    omit: ["children", "record"]
  })
);
var EditorCell_default = EditorCell;
