var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/hooks/useEditableColumns.ts
var useEditableColumns_exports = {};
__export(useEditableColumns_exports, {
  default: () => useEditableColumns
});
module.exports = __toCommonJS(useEditableColumns_exports);
var import_get = __toESM(require("lodash/get"));
var import_rc_util = require("rc-util");
var import_utils = require("../utils");
function useEditableColumns({
  columns,
  dataSource,
  onSave
}) {
  const handleSave = (0, import_rc_util.useEvent)((info) => {
    if (onSave) {
      const saveInfo = {
        ...info,
        record: (dataSource || [])[info.index]
      };
      onSave(saveInfo);
    }
  });
  return columns == null ? void 0 : columns.map((col) => ({
    ...col,
    onCell: (record, idx) => {
      var _a;
      const index = idx;
      let value = col.dataIndex ? (0, import_get.default)(record, col.dataIndex) : void 0;
      const editable = typeof col.editable === "function" ? col.editable(value, record, index) : col.editable;
      const field = (0, import_utils.getField)(col.key, col.dataIndex);
      return {
        ...(_a = col.onCell) == null ? void 0 : _a.call(col, record, index),
        field,
        value,
        record,
        index,
        editable,
        editorType: col.editorType,
        formItemProps: col.formItemProps,
        fieldProps: col.fieldProps,
        render: col.render,
        onSave: handleSave
      };
    }
  }));
}
