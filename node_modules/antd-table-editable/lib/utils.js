var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils.ts
var utils_exports = {};
__export(utils_exports, {
  getField: () => getField,
  getReadCellContent: () => getReadCellContent,
  memoEqual: () => memoEqual
});
module.exports = __toCommonJS(utils_exports);
var import_isEqual = __toESM(require("lodash/isEqual"));
var import_omit = __toESM(require("lodash/omit"));
var import_react = __toESM(require("react"));
function memoEqual(objA, objB, options = {}) {
  const tempObjA = (0, import_omit.default)(objA, options.omit || []);
  const tempObjB = (0, import_omit.default)(objB, options.omit || []);
  return (0, import_isEqual.default)(tempObjA, tempObjB);
}
function getField(key, dataIndex) {
  return String(key ?? dataIndex);
}
function getReadCellContent(children, content, prefixCls) {
  var _a, _b, _c, _d;
  const child = children[1];
  if (import_react.default.isValidElement(child) && ((_a = child.props.className) == null ? void 0 : _a.includes(`${prefixCls}-cell-content`))) {
    const finalContent = ((_d = (_c = (_b = content == null ? void 0 : content[1]) == null ? void 0 : _b.props) == null ? void 0 : _c.className) == null ? void 0 : _d.includes(
      `${prefixCls}-cell-content`
    )) ? content[1].props.children : content;
    return import_react.default.cloneElement(child, {}, finalContent);
  } else {
    return content;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getField,
  getReadCellContent,
  memoEqual
});
