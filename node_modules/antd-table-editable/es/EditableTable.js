function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["components", "columns", "editorComponents", "dataSource", "virtual", "onSave"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { Table } from 'antd';
import { isEqual } from 'lodash';
import get from 'lodash/get';
import rcUseMemo from 'rc-util/lib/hooks/useMemo';
import React, { useMemo } from 'react';
import EditableCell from "./components/EditableCell";
import useEditableColumns from "./hooks/useEditableColumns";
import { jsx as _jsx } from "react/jsx-runtime";
function EditableTable(_ref, ref) {
  var components = _ref.components,
    columns = _ref.columns,
    editorComponents = _ref.editorComponents,
    dataSource = _ref.dataSource,
    virtual = _ref.virtual,
    onSave = _ref.onSave,
    tableRestProps = _objectWithoutProperties(_ref, _excluded);
  var editableColumns = useEditableColumns({
    columns: columns,
    dataSource: dataSource,
    onSave: onSave
  });
  var cellComponent = useMemo(function () {
    return get(components, ['body', 'cell']) || (virtual ? 'div' : 'td');
  }, [components, virtual]);
  var Cell = rcUseMemo(function () {
    return function (props) {
      return /*#__PURE__*/_jsx(EditableCell, _objectSpread(_objectSpread({}, props), {}, {
        cellComponent: cellComponent,
        editorComponents: editorComponents
      }));
    };
  }, [cellComponent, editorComponents], function (prev, next) {
    return !isEqual(prev, next);
  });
  return /*#__PURE__*/_jsx(Table, _objectSpread(_objectSpread({
    ref: ref,
    bordered: true,
    size: "small",
    virtual: virtual
  }, tableRestProps), {}, {
    dataSource: dataSource,
    components: _objectSpread(_objectSpread({}, components), {}, {
      body: _objectSpread(_objectSpread({}, components === null || components === void 0 ? void 0 : components.body), {}, {
        cell: Cell
      })
    }),
    columns: editableColumns
  }));
}
export default /*#__PURE__*/React.forwardRef(EditableTable);