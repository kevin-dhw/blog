var _excluded = ["editorComponents"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { memo, useMemo } from 'react';
import { CellContext } from "../../context";
import useCellEditable from "../../hooks/useCellEditable";
import { memoEqual } from "../../utils";
import { jsx as _jsx } from "react/jsx-runtime";
var EditorCell = /*#__PURE__*/memo(function (_ref) {
  var editorComponents = _ref.editorComponents,
    props = _objectWithoutProperties(_ref, _excluded);
  var Component = editorComponents[props.editorType];
  var _useCellEditable = useCellEditable(props),
    mode = _useCellEditable.mode,
    selected = _useCellEditable.selected,
    setMode = _useCellEditable.setMode,
    setSelected = _useCellEditable.setSelected,
    fieldProps = _useCellEditable.fieldProps,
    render = _useCellEditable.render,
    form = _useCellEditable.form,
    cellProps = _useCellEditable.cellProps;
  var contextValue = useMemo(function () {
    return {
      mode: mode,
      setMode: setMode,
      selected: selected,
      setSelected: setSelected,
      form: form,
      editable: props.editable,
      editorType: props.editorType
    };
  }, [mode, setMode, selected, setSelected, form, props.editable, props.editorType]);
  return /*#__PURE__*/_jsx(CellContext.Provider, {
    value: contextValue,
    children: /*#__PURE__*/_jsx(Component, {
      value: props.value,
      fieldProps: fieldProps,
      render: render,
      cellProps: cellProps
    })
  });
}, function (prev, next) {
  return memoEqual(prev, next, {
    omit: ['children', 'record']
  });
});
export default EditorCell;