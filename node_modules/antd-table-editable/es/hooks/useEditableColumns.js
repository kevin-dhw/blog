function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import get from 'lodash/get';
import { useEvent } from 'rc-util';
import { getField } from "../utils";
export default function useEditableColumns(_ref) {
  var columns = _ref.columns,
    dataSource = _ref.dataSource,
    onSave = _ref.onSave;
  // 保持引用不变，可以 memo
  var handleSave = useEvent(function (info) {
    if (onSave) {
      // 因为 record 被 memoEqual 函数 omit 了，所以要在这里取最新的 record
      var saveInfo = _objectSpread(_objectSpread({}, info), {}, {
        record: (dataSource || [])[info.index]
      });
      onSave(saveInfo);
    }
  });
  return columns === null || columns === void 0 ? void 0 : columns.map(function (col) {
    return _objectSpread(_objectSpread({}, col), {}, {
      onCell: function onCell(record, idx) {
        var _col$onCell;
        var index = idx;
        var value = col.dataIndex ? get(record, col.dataIndex) : undefined;
        var editable = typeof col.editable === 'function' ? col.editable(value, record, index) : col.editable;
        var field = getField(col.key, col.dataIndex);
        return _objectSpread(_objectSpread({}, (_col$onCell = col.onCell) === null || _col$onCell === void 0 ? void 0 : _col$onCell.call(col, record, index)), {}, {
          field: field,
          value: value,
          record: record,
          index: index,
          editable: editable,
          editorType: col.editorType,
          formItemProps: col.formItemProps,
          fieldProps: col.fieldProps,
          render: col.render,
          onSave: handleSave
        });
      }
    });
  });
}