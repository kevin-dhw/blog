function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["value", "index", "children", "field", "record", "fieldProps", "formItemProps", "editorType", "cellComponent", "onClick", "onSave"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { Form } from 'antd';
import { ConfigContext } from 'antd/lib/config-provider';
import clsx from 'clsx';
import omit from 'lodash/omit';
import { composeRef } from 'rc-util/lib/ref';
import { useContext, useRef, useState } from 'react';
import { getReadCellContent } from "../utils";
import useClickAway from "./useClickAway";
import { jsx as _jsx } from "react/jsx-runtime";
export default function useCellEditable(_ref) {
  var value = _ref.value,
    index = _ref.index,
    children = _ref.children,
    field = _ref.field,
    record = _ref.record,
    propsFieldProps = _ref.fieldProps,
    propsFormItemProps = _ref.formItemProps,
    editorType = _ref.editorType,
    CellComponent = _ref.cellComponent,
    _onClick = _ref.onClick,
    onSave = _ref.onSave,
    restProps = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    selected = _useState2[0],
    setSelected = _useState2[1];
  var _useState3 = useState('read'),
    _useState4 = _slicedToArray(_useState3, 2),
    mode = _useState4[0],
    setMode = _useState4[1];
  var cellRef = useRef(null);
  var _Form$useForm = Form.useForm(),
    _Form$useForm2 = _slicedToArray(_Form$useForm, 1),
    form = _Form$useForm2[0];
  var _useContext = useContext(ConfigContext),
    getPrefixCls = _useContext.getPrefixCls;
  var prefixCls = getPrefixCls('table');
  useClickAway(cellRef, function () {
    setSelected(false);
    setMode('read');
  });
  var fieldProps = typeof propsFieldProps === 'function' ? propsFieldProps(value, record, index) : propsFieldProps;
  var formItemProps = typeof propsFormItemProps === 'function' ? propsFormItemProps(value, record, index) : propsFormItemProps;
  var cellProps = _objectSpread(_objectSpread({}, omit(restProps, ['record', 'editable'])), {}, {
    onClick: function onClick(e) {
      setSelected(true);
      _onClick === null || _onClick === void 0 || _onClick(e);
    }
  });
  var render = function render(content, params) {
    var _params$cellProps;
    var node = mode === 'read' ? getReadCellContent(children, content, prefixCls) : /*#__PURE__*/_jsx(Form, _objectSpread(_objectSpread({
      form: form,
      component: false,
      preserve: false
    }, params === null || params === void 0 ? void 0 : params.formProps), {}, {
      onFinish: function onFinish(values) {
        var _params$formProps, _params$formProps$onF;
        if (form.isFieldsTouched()) {
          onSave({
            field: field,
            value: Object.values(values)[0],
            index: index,
            editorType: editorType
          });
        }
        setMode('read');
        params === null || params === void 0 || (_params$formProps = params.formProps) === null || _params$formProps === void 0 || (_params$formProps$onF = _params$formProps.onFinish) === null || _params$formProps$onF === void 0 || _params$formProps$onF.call(_params$formProps, values);
      },
      onFinishFailed: function onFinishFailed(errorInfo) {
        var _params$formProps2, _params$formProps2$on;
        setMode('read');
        params === null || params === void 0 || (_params$formProps2 = params.formProps) === null || _params$formProps2 === void 0 || (_params$formProps2$on = _params$formProps2.onFinishFailed) === null || _params$formProps2$on === void 0 || _params$formProps2$on.call(_params$formProps2, errorInfo);
      },
      children: /*#__PURE__*/_jsx(Form.Item, _objectSpread(_objectSpread(_objectSpread({
        name: "name",
        initialValue: value,
        noStyle: true
      }, params === null || params === void 0 ? void 0 : params.formItemProps), formItemProps), {}, {
        children: content
      }))
    }));
    return /*#__PURE__*/_jsx(CellComponent, _objectSpread(_objectSpread({}, params === null || params === void 0 ? void 0 : params.cellProps), {}, {
      ref: composeRef(cellRef, params === null || params === void 0 || (_params$cellProps = params.cellProps) === null || _params$cellProps === void 0 ? void 0 : _params$cellProps.ref),
      className: clsx(_defineProperty({}, "".concat(prefixCls, "-cell-selected"), selected), cellProps === null || cellProps === void 0 ? void 0 : cellProps.className, restProps.className),
      style: _objectSpread(_objectSpread({}, cellProps === null || cellProps === void 0 ? void 0 : cellProps.style), restProps.style),
      children: node
    }));
  };
  return {
    mode: mode,
    selected: selected,
    setMode: setMode,
    setSelected: setSelected,
    render: render,
    form: form,
    fieldProps: fieldProps,
    cellProps: cellProps
  };
}